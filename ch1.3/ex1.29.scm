(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (test label intfun flabel f param)
  (display "(")
  (display label)
  (display " ")
  (display flabel)
  (display " 0 1 ")
  (display param)
  (display ") => ")
  (display (intfun f 0 1 param))
  (newline))

(define (square x)
  (* x x))

(define (cube x)
  (* x x x))

(define (integral-1 f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(define (integral-2 f a b n)
  (define (h)
    (/ (- b a) n))
  (define (y k)
    (f (+ a (* k (h)))))
  (define (even? n)
    (= (remainder n 2) 0))
  (define (term k)
    ;(display "(term ")(display k)(display ")")(newline)
    (cond ((= k 0) (y k))
          ((= k n) (y k))
          ((even? k) (* 2 (y k)))
          (else (* 4 (y k)))))
  (define (next k)
    (+ k 1))
  (/ (* (h)
        (sum term a next n))
     3))

(test "integral-1" integral-1 "cube" cube 0.01)
(test "integral-1" integral-1 "cube" cube 0.001)
(test "integral-1" integral-1 "square" square 0.001)
(test "integral-1" integral-1 "sin" sin 0.001)
(test "integral-2" integral-2 "cube" cube 2)
(test "integral-2" integral-2 "cube" cube 10)
(test "integral-2" integral-2 "cube" cube 100)
(test "integral-2" integral-2 "cube" cube 1000)
(test "integral-2" integral-2 "square" square 1000)
(test "integral-2" integral-2 "sin" sin 1000)
